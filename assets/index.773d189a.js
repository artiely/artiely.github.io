import{i as a,o as p,c as e,j as n,k as t}from"./app.dce1b217.js";var o="/assets/bm3z5isc5qqlqu2d31c0.527883d1.png";const c=t('<h1 id="%E6%9C%89%E7%94%A8%E7%9A%84javascript%E6%8A%80%E5%B7%A7" tabindex="-1"><span class="prefix"></span><span class="content">\u6709\u7528\u7684javascript\u6280\u5DE7</span><span class="suffix"></span></h1><p>\u60A8\u53EF\u4EE5\u4F7F\u7528 JavaScript \u4EE5\u4E0D\u540C\u7684\u65B9\u5F0F\u505A\u540C\u6837\u7684\u4E8B\u60C5\u3002\u968F\u7740\u6BCF\u4E2A\u65B0 ECMAScript \u89C4\u8303\u7684\u53D1\u5E03\uFF0C\u90FD\u6DFB\u52A0\u4E86\u65B0\u7684\u65B9\u6CD5\u548C\u8FD0\u7B97\u7B26\uFF0C\u4EE5\u4F7F\u4EE3\u7801\u66F4\u77ED\u4E14\u66F4\u5177\u53EF\u8BFB\u6027\u3002</p><p><img src="'+o+`" alt="\u4EE3\u7801">]</p><h2 id="object.entries" tabindex="-1"><span class="prefix"></span><span class="content">Object.entries</span><span class="suffix"></span></h2><p>\u5927\u591A\u6570\u5F00\u53D1\u4EBA\u5458\u4F7F\u7528<strong>Object.keys</strong>\u65B9\u6CD5\u6765\u8FED\u4EE3\u5BF9\u8C61\u3002\u6B64\u65B9\u6CD5\u4EC5\u8FD4\u56DE\u5BF9\u8C61\u952E\u6570\u7EC4\uFF0C\u800C\u4E0D\u8FD4\u56DE\u503C\u3002\u60A8\u53EF\u4EE5\u4F7F\u7528<strong>Object.entries</strong>\u6765\u83B7\u53D6\u952E\u548C\u503C\u3002</p><div class="language-js ext-js code-wrapper"><div class="cbt-traffic_light"><span></span><span></span><span></span></div><span class="copy"></span><div class="code-inner"><pre class="language-js line-numbers-mode"><code class="language-js"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Nick&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">27</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span> <span class="token comment">// [&#39;name&#39;, &#39;age&#39;]</span>
Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment">// [[&#39;name&#39;, &#39;Nick&#39;], [&#39;age&#39;, 27]]</span>
</code></pre></div><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>\u8981\u8FED\u4EE3\u4E00\u4E2A\u5BF9\u8C61\uFF0C\u6211\u4EEC\u53EF\u4EE5\u6267\u884C\u4EE5\u4E0B\u64CD\u4F5C\uFF1A</p><div class="language-js ext-js code-wrapper"><div class="cbt-traffic_light"><span></span><span></span><span></span></div><span class="copy"></span><div class="code-inner"><pre class="language-js line-numbers-mode"><code class="language-js">Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>person<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// using records to get the key and value</span>
Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// expected result:</span>
<span class="token comment">// name is Nick</span>
<span class="token comment">// age is 27</span>
</code></pre></div><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>\u4E0A\u8FF0\u4E24\u79CD\u65B9\u6CD5\u90FD\u8FD4\u56DE\u76F8\u540C\u7684\u7ED3\u679C\uFF0C\u4F46<strong>Object.entries</strong>\u53EF\u4EE5\u8F7B\u677E\u83B7\u53D6\u952E\u503C\u5BF9\u3002</p><h2 id="replaceall%E6%96%B9%E6%B3%95" tabindex="-1"><span class="prefix"></span><span class="content">replaceAll\u65B9\u6CD5</span><span class="suffix"></span></h2><p>\u5728 JavaScript \u4E2D\uFF0C\u8981\u5C06\u6240\u6709\u51FA\u73B0\u7684\u5B57\u7B26\u4E32\u66FF\u6362\u4E3A\u53E6\u4E00\u4E2A\u5B57\u7B26\u4E32\uFF0C\u6211\u4EEC\u9700\u8981\u4F7F\u7528\u5982\u4E0B\u6B63\u5219\u8868\u8FBE\u5F0F\uFF1A</p><div class="language-js ext-js code-wrapper"><div class="cbt-traffic_light"><span></span><span></span><span></span></div><span class="copy"></span><div class="code-inner"><pre class="language-js line-numbers-mode"><code class="language-js"><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">&#39;Red-Green-Blue&#39;</span>

<span class="token comment">// replaces only the first entry</span>

str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token comment">// Red Green-Blue</span>

<span class="token comment">// use a regular expression to replace all entries</span>
str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\-</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token comment">// Red Green Blue</span>
</code></pre></div><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>\u4F46\u662F\u5728 ES12 \u4E2D\uFF0C\u4E00\u4E2A\u65B0\u7684 replaceAll<strong>\u65B9\u6CD5\u88AB\u6DFB\u52A0\u5230 String.prototype \u4E2D</strong>\uFF0C\u5B83\u5C06\u6240\u6709\u51FA\u73B0\u7684\u5B57\u7B26\u4E32\u66FF\u6362\u4E3A\u53E6\u4E00\u4E2A\u5B57\u7B26\u4E32\u503C\uFF1A</p><div class="language-js ext-js code-wrapper"><div class="cbt-traffic_light"><span></span><span></span><span></span></div><span class="copy"></span><div class="code-inner"><pre class="language-js line-numbers-mode"><code class="language-js">str<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token comment">// Red Green Blue</span>
</code></pre></div><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><h2 id="%E6%95%B0%E5%AD%97%E5%88%86%E9%9A%94%E7%AC%A6" tabindex="-1"><span class="prefix"></span><span class="content">\u6570\u5B57\u5206\u9694\u7B26</span><span class="suffix"></span></h2><p>\u60A8\u53EF\u4EE5\u4F7F\u7528\u4E0B\u5212\u7EBF\u201C_\u201D\u4F5C\u4E3A\u6570\u5B57\u5206\u9694\u7B26\u6765\u7B80\u5316\u6570\u5B57\u4E2D\u96F6\u7684\u8BA1\u6570\u3002</p><div class="language-js ext-js code-wrapper"><div class="cbt-traffic_light"><span></span><span></span><span></span></div><span class="copy"></span><div class="code-inner"><pre class="language-js line-numbers-mode"><code class="language-js"><span class="token comment">// less readable</span>
<span class="token keyword">const</span> billion <span class="token operator">=</span> <span class="token number">1000000000</span>
<span class="token comment">// more readable</span>
<span class="token keyword">const</span> readableBillion <span class="token operator">=</span> <span class="token number">1000_000_000</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>readableBillion<span class="token punctuation">)</span> <span class="token comment">// returns 1000000000</span>
</code></pre></div><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>\u5206\u9694\u7B26\u4E5F\u53EF\u4EE5\u4E0E BigInt \u6570\u5B57\u4E00\u8D77\u4F7F\u7528\uFF0C\u5982\u4E0B\u4F8B\u6240\u793A\uFF1A</p><div class="language-js ext-js code-wrapper"><div class="cbt-traffic_light"><span></span><span></span><span></span></div><span class="copy"></span><div class="code-inner"><pre class="language-js line-numbers-mode"><code class="language-js"><span class="token keyword">const</span> trillion <span class="token operator">=</span> <span class="token number">1000_000_000_000n</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>trillion<span class="token punctuation">)</span> <span class="token comment">// 1000000000000</span>
</code></pre></div><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>\u8FD9\u4F7F\u6570\u5B57\u66F4\u5177\u53EF\u8BFB\u6027\u3002</p><h2 id="document.designmode" tabindex="-1"><span class="prefix"></span><span class="content">document.designMode</span><span class="suffix"></span></h2><p>\u94FE\u63A5\u5230\u524D\u7AEF JavaScript\uFF0C<strong>\u8BBE\u8BA1\u6A21\u5F0F</strong>\u5141\u8BB8\u60A8\u7F16\u8F91\u9875\u9762\u4E0A\u7684\u4EFB\u4F55\u5185\u5BB9\u3002\u53EA\u9700\u6253\u5F00\u6D4F\u89C8\u5668\u63A7\u5236\u53F0\u5E76\u8F93\u5165\u4EE5\u4E0B\u5185\u5BB9\uFF1A</p><div class="language-js ext-js code-wrapper"><div class="cbt-traffic_light"><span></span><span></span><span></span></div><span class="copy"></span><div class="code-inner"><pre class="language-js line-numbers-mode"><code class="language-js">document<span class="token punctuation">.</span>designMode <span class="token operator">=</span> <span class="token string">&#39;on&#39;</span>
</code></pre></div><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>\u8FD9\u5BF9\u8BBE\u8BA1\u4EBA\u5458\u5F88\u6709\u7528\uFF0C\u56E0\u4E3A\u4ED6\u4EEC\u4E0D\u9700\u8981\u6BCF\u6B21\u90FD\u66F4\u6539\u4EE3\u7801\u4E2D\u7684\u67D0\u4E9B\u5185\u5BB9\u4EE5\u5339\u914D\u5C4F\u5E55\u4E0A\u7684\u66F4\u6539\u3002</p><h2 id="%E9%80%BB%E8%BE%91%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6" tabindex="-1"><span class="prefix"></span><span class="content">\u903B\u8F91\u8D4B\u503C\u8FD0\u7B97\u7B26</span><span class="suffix"></span></h2><p>\u903B\u8F91\u8D4B\u503C\u8FD0\u7B97\u7B26\u662F\u903B\u8F91\u8FD0\u7B97\u7B26**&amp;&amp;\u3001||\u3001??<strong>\u7684\u7EC4\u5408\u3002\u548C\u8D4B\u503C\u8FD0\u7B97\u7B26</strong>=**\u3002</p><div class="language-js ext-js code-wrapper"><div class="cbt-traffic_light"><span></span><span></span><span></span></div><span class="copy"></span><div class="code-inner"><pre class="language-js line-numbers-mode"><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">2</span>
a <span class="token operator">&amp;&amp;=</span> b
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// returns 2</span>
<span class="token comment">// the above statement is equivalent to a &amp;&amp; (a = b);</span>
<span class="token comment">// OR another way</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span>
  a <span class="token operator">=</span> b
</code></pre></div><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>\u5728\u8FD9\u91CC\u5B83\u68C0\u67E5<strong>a</strong>\u7684\u503C\u662F\u5426\u5339\u914D true\uFF0C\u5982\u679C\u662F\uFF0C\u6211\u4EEC\u66F4\u65B0\u5B83\u7684\u503C\u3002\u903B\u8F91**OR //**\u8FD0\u7B97\u7B26\u4E5F\u53EF\u4EE5\u505A\u5230\u8FD9\u4E00\u70B9\u3002</p><div class="language-js ext-js code-wrapper"><div class="cbt-traffic_light"><span></span><span></span><span></span></div><span class="copy"></span><div class="code-inner"><pre class="language-js line-numbers-mode"><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">3</span>
a <span class="token operator">||=</span> b
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// returns 3</span>
<span class="token comment">// the above statement is equivalent to</span>
a <span class="token operator">||</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> b<span class="token punctuation">)</span>
</code></pre></div><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>\u8FD8\u8981\u5728\u64CD\u4F5C\u5458\u7684\u5E2E\u52A9\u4E0B**\uFF1F\uFF1F**\uFF1A</p><div class="language-js ext-js code-wrapper"><div class="cbt-traffic_light"><span></span><span></span><span></span></div><span class="copy"></span><div class="code-inner"><pre class="language-js line-numbers-mode"><code class="language-js"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">3</span>
a <span class="token operator">??=</span> b
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// returns 3</span>
<span class="token comment">// the above statement is equivalent to</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> a <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>
  a <span class="token operator">=</span> b
</code></pre></div><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>\u8BF7\u6CE8\u610F\uFF0C\u81EA<strong>ES 12/ES 2021</strong>\u8D77\u6DFB\u52A0\u4E86\u903B\u8F91\u8D4B\u503C\u8FD0\u7B97\u7B26\u3002</p><h2 id="%E7%BB%93%E8%AE%BA" tabindex="-1"><span class="prefix"></span><span class="content">\u7ED3\u8BBA</span><span class="suffix"></span></h2><p>\u8FD9\u4E9B\u6280\u5DE7\u548C\u529F\u80FD\u53EF\u4EE5\u52A0\u5FEB\u5F00\u53D1\u4EBA\u5458\u7684\u5DE5\u4F5C\uFF0C\u5B83\u4EEC\u7684\u4F7F\u7528\u4E0D\u4EC5\u662F\u5FC5\u8981\u7684\uFF0C\u800C\u4E14\u662F\u6709\u7528\u7684\u3002\u7EE7\u7EED\u63A2\u7D22\u8BED\u8A00\u7684\u9690\u85CF\u7279\u5F81\uFF0C\u5B66\u4E60\u5404\u79CD\u6280\u5DE7\u5E76\u63D0\u9AD8\u6280\u80FD\u3002</p>`,34),l=[c],b={tag:"javascript",cover:"/2022-05-11-09-25-23.png",tinyCover:"/cover/2022-05-11-09-25-23.png",coverWidth:500,coverHeight:750,coverPrimary:"1f1f1f",coverSecondary:"e0e0e0",meta:[]},r={__name:"index",setup(i,{expose:s}){return a({meta:[]}),s({frontmatter:{tag:"javascript",cover:"/2022-05-11-09-25-23.png",tinyCover:"/cover/2022-05-11-09-25-23.png",coverWidth:500,coverHeight:750,coverPrimary:"1f1f1f",coverSecondary:"e0e0e0",meta:[]}}),(k,d)=>(p(),e("div",null,l))}};typeof n=="function"&&n(r);export{r as default,b as frontmatter};
