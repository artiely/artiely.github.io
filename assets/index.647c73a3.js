import{i as a,o as p,c as t,j as n,k as c}from"./app.1cc11fc1.js";var o="/assets/image-20220330104605226-8608373.4571686f.png",e="/assets/image-20220113202951495.1ce5677d.png",l="/assets/image-20220330104915162-8608556.d8a4c899.png";const u=c(`<p>\u5728\u7F51\u9875\u4E2D\uFF0C\u6211\u4EEC\u4ECE\u7528\u6237\u8F93\u5165\u7684\u5185\u5BB9\u4E2D\u83B7\u53D6\u7684\u503C\u901A\u5E38\u662F\u5B57\u7B26\u4E32\uFF0C\u4F46\u662F\u6709\u65F6\u5019\u6211\u4EEC\u5E0C\u671B\u7528\u6237\u8F93\u5165\u7684\u5185\u5BB9\u4E00\u5B9A\u8981\u80FD\u8F6C\u6210\u6570\u503C\uFF1A</p><div class="language-js ext-js code-wrapper"><div class="cbt-traffic_light"><span></span><span></span><span></span></div><span class="copy"></span><div class="code-inner"><pre class="language-js line-numbers-mode"><code class="language-js"><span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">&quot;userInput&quot;</span><span class="token operator">&gt;</span>
userInput<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> value <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string</span>
  console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">isNumeric</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Not a numeric value: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>\u5373\u6211\u4EEC\u8981\u5B9E\u73B0\u4E00\u4E2AisNumeric\u65B9\u6CD5\uFF0C\u5224\u65AD\u7528\u6237\u8F93\u5165\u7684\u503C\u662F\u80FD\u8F6C\u4E3A<strong>\u6570\u503C\u7684\u5B57\u7B26\u4E32</strong>\u3002</p><p>\u6211\u4EEC\u8BA8\u8BBAisNumeric\u5B9E\u73B0\u524D\uFF0C\u5148\u8BF4\u4E00\u4E0B\u9650\u5236\u7528\u6237\u8F93\u5165\u7684\u65B9\u5F0F\u3002</p><p>\u{1F449}\u{1F3FB} \u5982\u679C\u6211\u4EEC\u8BBE\u7F6Einput\u7684type\u4E3Anumber\uFF0C\u5E76\u4E0D\u80FD\u4FDD\u8BC1\u8F93\u5165\u7684\u5185\u5BB9\u4E00\u5B9A\u662F\u6570\u503C\uFF0C\u56E0\u4E3A\u5982\u679Cinput\u7684type\u662Fnumber\uFF0C<strong>\u5B83\u4F9D\u7136\u53EF\u4EE5\u8F93\u5165\u591A\u4E2A\u201C+\u201C\u3001\u201D-\u201D\u3001\u201C.\u201D\u3001\u201Ce\u201D</strong> \u3002</p><div class="language-html ext-html code-wrapper"><div class="cbt-traffic_light"><span></span><span></span><span></span></div><span class="copy"></span><div class="code-inner"><pre class="language-html line-numbers-mode"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>number<span class="token punctuation">&quot;</span></span> <span class="token attr-name">step</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0.0000001<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userInput<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre></div><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><figure><img src="`+o+`" alt="image-20220330104605226"></figure><p><em>input[type=number]\u5E76\u4E0D\u963B\u6B62\u8F93\u5165\u591A\u4E2Ae</em></p><p><em><strong>\u8FD9\u662F\u56E0\u4E3A\u201C+/-\u201D\uFF08\u6B63\u8D1F\u7B26\u53F7\uFF09\uFF0C\u201C.\u201D\uFF08\u5C0F\u6570\u70B9\uFF09\u548C\u201Ce\u201D\uFF08\u79D1\u5B66\u8BB0\u6570\u6CD5\uFF09\u90FD\u662FNumber\u5141\u8BB8\u8F93\u5165\u7684\u5B57\u7B26\u3002</strong></em></p><p>\u4E0D\u8FC7\u5982\u679C\u5728form\u63D0\u4EA4\u7684\u65F6\u5019\uFF0C\u6D4F\u89C8\u5668\u4F1A\u5BF9<code class="">input[type=number]</code>\u5185\u5BB9\u518D\u505A\u4E00\u6B21\u68C0\u67E5\uFF1A</p><div class="language-html ext-html code-wrapper"><div class="cbt-traffic_light"><span></span><span></span><span></span></div><span class="copy"></span><div class="code-inner"><pre class="language-html line-numbers-mode"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myForm<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>number<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><figure><img src="`+e+`" alt="image-20220113202951495"></figure><p><em><strong>\u4F46\u662F\uFF0C\u4E0D\u7BA1\u600E\u6837\uFF0C\u7528\u6237\u8FD8\u662F\u53EF\u4EE5\u901A\u8FC7\u4FEE\u6539\u9875\u9762\u4E0A\u7684\u5143\u7D20\uFF0C\u7ED5\u8FC7\u8FD9\u4E9B\u68C0\u67E5\uFF0C\u6240\u4EE5\u6211\u4EEC\u8FD8\u662F\u8981\u7528\u5230 isNumeric \u6765\u5224\u65AD\u7528\u6237\u8F93\u5165\u7684\u5408\u6CD5\u6027\u3002</strong></em></p><p>\u6211\u4EEC\u5148\u770B\u4E00\u4E0B isNumeric \u5E94\u8BE5\u8FD4\u56DE\u4EC0\u4E48\u3002</p><p>\u5982\u679C\u53C2\u8003 input[type=number] \u7684\u89C4\u5219\uFF0C\u90A3\u4E48\u5B83\u5E94\u8BE5\u652F\u6301\u6240\u6709\u5408\u6CD5\u7684\u6709\u7A77\u6570\u503C\u5199\u6CD5\uFF1A</p><div class="language-js ext-js code-wrapper"><div class="cbt-traffic_light"><span></span><span></span><span></span></div><span class="copy"></span><div class="code-inner"><pre class="language-js line-numbers-mode"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token string">&#39;1000&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token string">&#39;-100.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token string">&#39;.1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token string">&#39;-3.2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token string">&#39;001&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token string">&#39;+4.5&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token string">&#39;1e3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token string">&#39;1e-3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token string">&#39;-100e-3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token string">&#39;++3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token string">&#39;-100..&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token string">&#39;3abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token string">&#39;-3e3.2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token string">&#39;Infinity&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token string">&#39;-Infinity&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="%E9%82%A3%E4%B9%88%E5%85%B7%E4%BD%93%E8%A6%81%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E5%91%A2%EF%BC%9F" tabindex="-1"><span class="prefix"></span><span class="content">\u90A3\u4E48\u5177\u4F53\u8981\u600E\u4E48\u5B9E\u73B0\u5462\uFF1F</span><span class="suffix"></span></h3><p><em><strong>\u601D\u800310\u79D2\u949F\u518D\u5F80\u4E0B\u770B\u2014\u2014</strong></em></p><h2 id="parsefloat%3F" tabindex="-1"><span class="prefix"></span><span class="content"><strong>parseFloat?</strong></span><span class="suffix"></span></h2><p>\u6709\u540C\u5B66\u60F3\u5230\u7528<strong>parseFloat</strong>\uFF0C\u8FD9\u4E2A\u884C\u4E0D\u884C\u5462\uFF1F</p><div class="language-js ext-js code-wrapper"><div class="cbt-traffic_light"><span></span><span></span><span></span></div><span class="copy"></span><div class="code-inner"><pre class="language-js line-numbers-mode"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">!</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>\u8FD9\u4E2A\u663E\u7136\u662F<strong>\u4E0D\u884C\u7684</strong>\uFF0C\u56E0\u4E3A<code class="">parseFloat(&#39;123abc&#39;)</code>\u7ED3\u679C\u662F123\uFF0C\u56E0\u4E3A parseFloat \u4F1A\u5C1D\u8BD5\u8F6C\u90E8\u5206\u6570\u503C\uFF0C\u800C\u5FFD\u7565\u6389\u4E0D\u80FD\u8F6C\u6570\u503C\u7684\u90E8\u5206\u3002</p><p>\u6240\u4EE5\uFF1A</p><div class="language-js ext-js code-wrapper"><div class="cbt-traffic_light"><span></span><span></span><span></span></div><span class="copy"></span><div class="code-inner"><pre class="language-js line-numbers-mode"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token string">&#39;-100..&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token string">&#39;3abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token string">&#39;-3e3.2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>\u8FD9\u4E09\u4E2A case \u662F\u8FC7\u4E0D\u53BB\u7684\uFF0C\u53E6\u5916\u8FD9\u91CC\u7528\u4E86<code class="">Number.isNaN</code>\u5904\u7406 parseFloat \u4E4B\u540E\u7684\u7ED3\u679C\uFF0C\u7531\u4E8E \xB1Infinity \u662F\u6570\u503C\uFF0C<code class="">Number.isNaN</code>\u4F1A\u8FD4\u56DE false\uFF0C\u6240\u4EE5\uFF1A</p><div class="language-js ext-js code-wrapper"><div class="cbt-traffic_light"><span></span><span></span><span></span></div><span class="copy"></span><div class="code-inner"><pre class="language-js line-numbers-mode"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token string">&#39;Infinity&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token string">&#39;-Infinity&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>\u4E5Fpass\u4E0D\u4E86\u3002</p><h2 id="isnan" tabindex="-1"><span class="prefix"></span><span class="content"><strong>isNaN</strong></span><span class="suffix"></span></h2><p>\u6709\u540C\u5B66\u8BF4\uFF0C\u90A3\u6211\u4EEC\u76F4\u63A5\u4F7F\u7528<strong>isNaN</strong>\u5982\u4F55\uFF1F</p><div class="language-js ext-js code-wrapper"><div class="cbt-traffic_light"><span></span><span></span><span></span></div><span class="copy"></span><div class="code-inner"><pre class="language-js line-numbers-mode"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>\u8FD9\u6B21\u7ED3\u679C\u597D\u5F97\u591A\uFF0C\u4F46\u662F\u6700\u540E\u4E09\u6761\u89C4\u5219\u8FC7\u4E0D\u4E86\uFF1A</p><div class="language-js ext-js code-wrapper"><div class="cbt-traffic_light"><span></span><span></span><span></span></div><span class="copy"></span><div class="code-inner"><pre class="language-js line-numbers-mode"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token string">&#39;Infinity&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token string">&#39;-Infinity&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>\xB1Infinity \u548C\u4E0A\u9762\u7684\u539F\u56E0\u4E00\u6837\uFF0C\u4F46\u662F\u4E3A\u4EC0\u4E48<code class="">&#39;&#39;</code>\u4E5F pass \u4E0D\u4E86\u5462\uFF1F<strong>\u8FD9\u662F\u56E0\u4E3A isNaN \u4F1A\u5148\u5C1D\u8BD5\u5C06\u53C2\u6570\u8F6C\u4E3A Number\uFF0C\u800C\u7A7A\u5B57\u7B26\u4E32\u88AB\u8F6C\u4E3A\u4E86\u6570\u503C 0\u3002</strong></p><div class="language-js ext-js code-wrapper"><div class="cbt-traffic_light"><span></span><span></span><span></span></div><span class="copy"></span><div class="code-inner"><pre class="language-js line-numbers-mode"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0</span>
</code></pre></div><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><p>\u8FD9\u91CC\u9762\u5C31\u4E0D\u5F97\u4E0D\u63D0\u4E00\u4E0B**<a href="https://www.ecma-international.org/publications-and-standards/standards/ecma-262/" target="_blank" rel="noopener">ECMA-262</a>\u89C4\u8303\u91CC\u9762<a href="https://262.ecma-international.org/11.0/#sec-tonumber" target="_blank" rel="noopener">ToNumber</a> \u7684\u8F6C\u6362\u89C4\u5219**\u4E86\uFF1A</p><figure><img src="`+l+`" alt="image-20220330104915162"></figure><p>\u6839\u636E\u89C4\u5219\uFF0CNull\u3001Boolean \u90FD\u4F1A\u8F6C\u6210 Number\uFF0CUndefined \u88AB\u8F6C\u6210 NaN\uFF0CUndefined \u4F1A\u88AB\u8F6C\u6210 NaN\uFF0C\u800C Symbol \u76F4\u63A5\u629B TypeError\u2026</p><p>\u52A0\u4E0A\u7A7A\u5B57\u7B26\u4E32<code class="">&#39;&#39;</code>\u88AB\u8F6C\u62100\uFF0CisNaN\u5C31 \u4F1A\u6709\u4E9B\u602A\u5F02\u7684\u884C\u4E3A\u4E86\uFF1A</p><div class="language-js ext-js code-wrapper"><div class="cbt-traffic_light"><span></span><span></span><span></span></div><span class="copy"></span><div class="code-inner"><pre class="language-js line-numbers-mode"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre></div><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>\u5176\u5B9E\u5B57\u7B26\u4E32\u9664\u4E86<code class="">&#39;&#39;</code>\u8FD8\u6709\u4E00\u4E9B\uFF1A</p><div class="language-js ext-js code-wrapper"><div class="cbt-traffic_light"><span></span><span></span><span></span></div><span class="copy"></span><div class="code-inner"><pre class="language-js line-numbers-mode"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&#39;\\t&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&#39;\\r&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre></div><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>\u8FD9\u5C31\u662F\u4E3A\u4EC0\u4E48 ES2015 \u4E4B\u540E\uFF0C\u53C8\u589E\u52A0\u4E86<strong>Number.isNaN</strong> \u65B9\u6CD5\u3002</p><blockquote><p>\u{1F449}\u{1F3FB} \u51B7\u77E5\u8BC6\uFF1AisNaN \u65B9\u6CD5\u5BF9\u53C2\u6570\u505A<code class="">[[ToNumber]]</code>\u8F6C\u6362\uFF0C\u4F1A\u5BFC\u81F4\u4E00\u4E9B\u6BD4\u8F83\u602A\u5F02\u7684\u7ED3\u679C\uFF0C\u6240\u4EE5ES2015 \u589E\u52A0\u4E86 Number.isNaN\uFF0C\u8BE5\u65B9\u6CD5\u4E0D\u4F1A\u5BF9\u53C2\u6570\u505A\u7C7B\u578B\u8F6C\u6362\uFF0C\u53EA\u8981\u53C2\u6570\u4E0D\u662F NaN\uFF0C\u4E0D\u7BA1\u662F\u4EC0\u4E48\u7C7B\u578B\uFF0CNumber.isNaN \u4E00\u5F8B\u8FD4\u56DE false\u3002</p></blockquote><div class="language-js ext-js code-wrapper"><div class="cbt-traffic_light"><span></span><span></span><span></span></div><span class="copy"></span><div class="code-inner"><pre class="language-js line-numbers-mode"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre></div><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="isfinite" tabindex="-1"><span class="prefix"></span><span class="content"><strong>isFinite</strong></span><span class="suffix"></span></h2><p>\u6211\u4EEC<strong>\u628A isNaN \u6362\u6210 isFinite</strong> \u770B\u770B\uFF1A</p><p>\u8FD9\u4E0B<code class="">&#39;\xB1Infinity&#39;</code>\u7684\u95EE\u9898\u89E3\u51B3\u4E86\uFF0C\u56E0\u4E3A Number \u4E2D\u7684 \xB1Infinite \u548C NaN \u7684 isFinite \u7ED3\u679C\u90FD\u8FD4\u56DE false\u3002</p><p>\u4E0D\u8FC7\u4E0E isNaN \u4E00\u6837\uFF0CisFinite \u4E5F\u4E00\u6837\u4F1A\u5BF9\u53C2\u6570\u8FDB\u884C\u7C7B\u578B\u8F6C\u6362\uFF0C\u6240\u4EE5\uFF0C\u8FD9\u51E0\u4E2A case \u95EE\u9898\u8FD8\u662F\u5B58\u5728\uFF1A</p><div class="language-js ext-js code-wrapper"><div class="cbt-traffic_light"><span></span><span></span><span></span></div><span class="copy"></span><div class="code-inner"><pre class="language-js line-numbers-mode"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token string">&#39;\\t&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token string">&#39;\\r&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><blockquote><p>\u{1F449}\u{1F3FB} <strong>\u51B7\u77E5\u8BC6</strong>\uFF1AisFinite \u4E0E isNaN \u4E00\u6837\uFF0C\u4F1A\u5BF9\u53C2\u6570\u505A<code class="">[[ToNumber]]</code>\u8F6C\u6362\uFF0C\u56E0\u6B64\u5BF9\u5E94\u7684\uFF0CES2015 \u4E5F\u63D0\u4F9B\u4E86\u4E00\u4E2A<code class="">Number.isFinite</code>\uFF0C\u8FD9\u662F\u4E0D\u8F6C\u6362\u53C2\u6570\u7C7B\u578B\u7684\u7248\u672C\u3002\u5982\u679C\u53C2\u6570\u4E0D\u662F Number \u7C7B\u578B\uFF0C<code class="">Number.isFinite</code>\u4E00\u5F8B\u8FD4\u56DE false\u3002</p></blockquote><div class="language-js ext-js code-wrapper"><div class="cbt-traffic_light"><span></span><span></span><span></span></div><span class="copy"></span><div class="code-inner"><pre class="language-js line-numbers-mode"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre></div><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>\u597D\u4E86\uFF0C\u90A3\u4E48\u8BA8\u8BBA\u5230\u8FD9\u91CC\uFF0C\u6700\u540E\u7684\u89E3\u51B3\u65B9\u6CD5\u5DF2\u7ECF\u547C\u4E4B\u6B32\u51FA\u4E86\u3002</p><p>\u56E0\u4E3A\u5BF9\u4E8E isNumeric \u7528\u6CD5\uFF0C\u6211\u4EEC\u53EA\u9700\u8981\u5904\u7406\u5B57\u7B26\u4E32\uFF0C\u975E\u5B57\u7B26\u4E32\u7684 case \u6211\u4EEC\u53EF\u4EE5\u4E0D\u7BA1\uFF1B\u90A3\u4E48\u6211\u4EEC\u5269\u4E0B\u7684\u5C31\u662F\u5904\u7406\u8FD9\u4E00\u5806\u5B57\u7B26\u4E32 case\uFF1A</p><div class="language-js ext-js code-wrapper"><div class="cbt-traffic_light"><span></span><span></span><span></span></div><span class="copy"></span><div class="code-inner"><pre class="language-js line-numbers-mode"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token string">&#39;\\t&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token string">&#39;\\r&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>\u8FD9\u4E2A\u6709\u5F88\u591A\u65B9\u5F0F\u53EF\u4EE5\u5904\u7406\u4E86\uFF0C\u6BD4\u5982\u5B83\u4EEC\u90FD\u5339\u914D\u6B63\u5219<code class="">/^\\s*$/</code>\uFF0C\u6240\u4EE5</p><div class="language-js ext-js code-wrapper"><div class="cbt-traffic_light"><span></span><span></span><span></span></div><span class="copy"></span><div class="code-inner"><pre class="language-js line-numbers-mode"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\s*$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isFinite</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>\u8FD9\u4E2A\u7248\u672C\u5C31\u53EF\u4EE5\u901A\u8FC7\u6240\u6709\u7684 case \u4E86\u3002</p><p>\u53E6\u5916\uFF0C\u8FD9\u4E9B\u5B57\u7B26\u4E32\u7684 parseFloat \u90FD\u662F NaN\uFF0C\u6240\u4EE5\uFF0C\u4E5F\u53EF\u4EE5\u8FD9\u6837\uFF1A</p><div class="language-js ext-js code-wrapper"><div class="cbt-traffic_light"><span></span><span></span><span></span></div><span class="copy"></span><div class="code-inner"><pre class="language-js line-numbers-mode"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isFinite</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>\u5B9E\u9645\u4E0A\u8FD9\u4E2A\u6BD4\u4E0A\u9762\u90A3\u4E2A\u6B63\u5219\u7684\u7248\u672C\u66F4\u597D\uFF0C\u56E0\u4E3A\u8FD9\u4E2A\u8FD8\u540C\u65F6\u5904\u7406\u4E86\u975E\u5B57\u7B26\u4E32\u7684 case\uFF0C\u56E0\u4E3A\uFF1A</p><div class="language-js ext-js code-wrapper"><div class="cbt-traffic_light"><span></span><span></span><span></span></div><span class="copy"></span><div class="code-inner"><pre class="language-js line-numbers-mode"><code class="language-js"><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
<span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
</code></pre></div><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>\u4E0A\u9762\u8FD9\u4E9B\u7684\u7ED3\u679C\u90FD\u662F NaN\u3002</p><p><strong>\u5B9E\u9645\u4E0A\uFF0C\u4E0A\u9762\u8FD9\u4E2A\u7248\u672C\u5C31\u662F\u8457\u540D\u7684 jQuery \u6846\u67B6\u4E2D\u7684<code class="">jQuery.isNumeric</code>\u7684\u5B9E\u73B0\u65B9\u5F0F\u3002</strong></p><p>\u56E0\u4E3A\u73B0\u5728\u4E0D\u5EFA\u8BAE\u7528 isNaN \u548C isFinite\uFF0C\u800C\u63A8\u8350\u4F7F\u7528<code class="">Number.isNaN</code>\u548C<code class="">Number.isFinite</code>\u66FF\u4EE3\uFF0C\u6240\u4EE5\u4E00\u4E9B linter \u7684\u89C4\u5219\u53EF\u80FD\u4F1A\u7981\u6B62\u4F7F\u7528\u8FD9\u4E24\u4E2A\u51FD\u6570\uFF0C\u4F46\u662F\u6CA1\u6709\u5173\u7CFB\uFF0C\u56E0\u4E3A\u6211\u4EEC\u53EF\u4EE5\u8FD9\u4E48\u5199\uFF1A</p><div class="language-js ext-js code-wrapper"><div class="cbt-traffic_light"><span></span><span></span><span></span></div><span class="copy"></span><div class="code-inner"><pre class="language-js line-numbers-mode"><code class="language-js"><span class="token keyword">function</span> <span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token operator">!</span>Number<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token operator">&amp;&amp;</span> Number<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>\u6240\u4EE5\uFF0C\u8FD9\u4E2A\u5C31\u662F\u6700\u7EC8\u7684\u7248\u672C\u3002</p><p>\u539F\u6765\uFF0C\u5B9E\u73B0\u4E00\u4E2A\u5C0F\u5C0F\u7684\u51FD\u6570 isNumeric\uFF0C\u6709\u90A3\u4E48\u591A\u9700\u8981\u6CE8\u610F\u7684\u5730\u65B9\u3002</p><h3 id="%E5%85%B3%E4%BA%8E%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E6%95%B0%E5%80%BC%EF%BC%8C%E4%BD%A0%E8%BF%98%E6%9C%89%E4%BB%80%E4%B9%88%E6%83%B3%E6%B3%95" tabindex="-1"><span class="prefix"></span><span class="content">\u5173\u4E8E\u5224\u65AD\u5B57\u7B26\u4E32\u662F\u6570\u503C\uFF0C\u4F60\u8FD8\u6709\u4EC0\u4E48\u60F3\u6CD5</span><span class="suffix"></span></h3>`,68),i=[u],f={title:"\u524D\u7AEF\u51B7\u77E5\u8BC6\u5224\u65AD\u5B57\u7B26\u4E32\u662F\u6570\u5B57",tag:["js"],cover:"/2022-05-11-09-11-42.png",tinyCover:"/cover/2022-05-11-09-11-42.png",coverWidth:563,coverHeight:1001,meta:[{property:"og:title",content:"\u524D\u7AEF\u51B7\u77E5\u8BC6\u5224\u65AD\u5B57\u7B26\u4E32\u662F\u6570\u5B57"}]},r={__name:"index",setup(k,{expose:s}){return a({title:"\u524D\u7AEF\u51B7\u77E5\u8BC6\u5224\u65AD\u5B57\u7B26\u4E32\u662F\u6570\u5B57",meta:[{property:"og:title",content:"\u524D\u7AEF\u51B7\u77E5\u8BC6\u5224\u65AD\u5B57\u7B26\u4E32\u662F\u6570\u5B57"}]}),s({frontmatter:{title:"\u524D\u7AEF\u51B7\u77E5\u8BC6\u5224\u65AD\u5B57\u7B26\u4E32\u662F\u6570\u5B57",tag:["js"],cover:"/2022-05-11-09-11-42.png",tinyCover:"/cover/2022-05-11-09-11-42.png",coverWidth:563,coverHeight:1001,meta:[{property:"og:title",content:"\u524D\u7AEF\u51B7\u77E5\u8BC6\u5224\u65AD\u5B57\u7B26\u4E32\u662F\u6570\u5B57"}]}}),(m,g)=>(p(),t("div",null,i))}};typeof n=="function"&&n(r);export{r as default,f as frontmatter};
