import{i as a,o as p,c as t,j as n,k as e}from"./app.dce1b217.js";const o=e(`<div class="language-js ext-js code-wrapper"><div class="cbt-traffic_light"><span></span><span></span><span></span></div><span class="copy"></span><div class="code-inner"><pre class="language-js line-numbers-mode"><code class="language-js"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token function-variable function">selfMap</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// fn: \u56DE\u8C03  context:\u56DE\u8C03\u4F5C\u7528\u57DF\u6307\u5B9A\u7684this</span>
    <span class="token comment">// 1. \u83B7\u53D6\u8C03\u7528\u8005this,\u5E76\u8F6C\u4E3A\u6570\u7EC4</span>
    <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    <span class="token comment">// 2. \u904D\u5386\u8C03\u7528\u8005</span>
    <span class="token keyword">const</span> arrMap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u8FD9\u4E2A\u5224\u65AD\u5C31\u662F\u5904\u7406js \u7A00\u758F\u6570\u7EC4</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>arr<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">continue</span>

      arrMap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> arrMap
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> <span class="token function-variable function">selfReduce</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> initialValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    <span class="token comment">// \u901A\u8FC7\u5224\u65AD\u5165\u53C2\u957F\u5EA6,\u53EF\u4EE5\u907F\u514D\u8FC7\u6EE4initialValue\u4F20\u5165\u7684\u975E\u6CD5\u503C(0,undifind,...)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span>
      arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>initialValue<span class="token punctuation">)</span>

    <span class="token keyword">let</span> result <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>arr<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">continue</span>

      <span class="token comment">// \u5C06\u7B2C\u4E00\u6B21\u7684\u51FA\u53C2\u4F5C\u4E3A\u7B2C\u4E8C\u6B21\u7684\u5165\u53C2</span>
      result <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> result<span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> result
  <span class="token punctuation">}</span>
  <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>selfReduce <span class="token operator">=</span> selfReduce
  <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>selfMap <span class="token operator">=</span> selfMap
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h2 id="js-%E7%A8%80%E7%96%8F%E6%95%B0%E7%BB%84" tabindex="-1"><span class="prefix"></span><span class="content">JS \u7A00\u758F\u6570\u7EC4</span><span class="suffix"></span></h2><p><a href="https://www.jianshu.com/p/181b122eb10e" target="_blank" rel="noopener">https://www.jianshu.com/p/181b122eb10e</a></p>`,3),c=[o],m={title:"\u624B\u5199 map \u548C reduce",tag:["javaScript"],cover:"/2022-05-13-13-29-26.png",base64:"1b1b20",author:"artiely",date:"2020-9-15",tinyCover:"/cover/2022-05-13-13-29-26.png",coverWidth:564,coverHeight:1002,coverPrimary:"667e95",coverSecondary:"99816a",meta:[{property:"og:title",content:"\u624B\u5199 map \u548C reduce"}]},l={__name:"2020-9-15-js-arr",setup(r,{expose:s}){return a({title:"\u624B\u5199 map \u548C reduce",meta:[{property:"og:title",content:"\u624B\u5199 map \u548C reduce"}]}),s({frontmatter:{title:"\u624B\u5199 map \u548C reduce",tag:["javaScript"],cover:"/2022-05-13-13-29-26.png",base64:"1b1b20",author:"artiely",date:"2020-9-15",tinyCover:"/cover/2022-05-13-13-29-26.png",coverWidth:564,coverHeight:1002,coverPrimary:"667e95",coverSecondary:"99816a",meta:[{property:"og:title",content:"\u624B\u5199 map \u548C reduce"}]}}),(i,k)=>(p(),t("div",null,c))}};typeof n=="function"&&n(l);export{l as default,m as frontmatter};
